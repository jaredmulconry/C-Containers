cmake_minimum_required (VERSION 3.1)
project (containers)

include(CTest)

include_directories(${CMAKE_CURRENT_LIST_DIR})
#get_filename_component(SOURCE_DIRECTORY_PARENT "${CMAKE_SOURCE_DIR}" DIRECTORY)
#SET(MY_OWN_INSTALL_PREFIX "${SOURCE_DIRECTORY_PARENT}" CACHE PATH "Prefix prepended to install directories")
#SET(CMAKE_INSTALL_PREFIX "${MY_OWN_INSTALL_PREFIX}" CACHE INTERNAL "Prefix prepended to install directories" FORCE)

SET(ALL_TEST_EXECUTABLES vector_constructor_test vector_assignment_test vector_accessor_test vector_dimension_test vector_addremove_test vector_iterator_test 
vector_relational_test dense_map_test dense_map_perf)
SET(VECTOR_TEST_HEADERS MyMallocator.hpp vector.hpp test/test_helpers.hpp)
SET(DENSE_MAP_TEST_HEADERS MyMallocator.hpp dense_map.hpp test/test_helpers.hpp)
SET(DENSE_MAP_PERF_HEADERS ${DENSE_MAP_TEST_HEADERS} test/randomised_input.hpp test/test_helpers.hpp)

#add_executable(vector_test ${VECTOR_TEST_HEADERS} test/vector_test.cpp test/test_helpers.cpp)
add_executable(vector_constructor_test ${VECTOR_TEST_HEADERS} test/vector_constructors_test.cpp test/test_helpers.cpp)
add_executable(vector_assignment_test ${VECTOR_TEST_HEADERS} test/vector_assignment_test.cpp test/test_helpers.cpp)
add_executable(vector_accessor_test ${VECTOR_TEST_HEADERS} test/vector_accessor_test.cpp test/test_helpers.cpp)
add_executable(vector_dimension_test ${VECTOR_TEST_HEADERS} test/vector_dimension_test.cpp test/test_helpers.cpp)
add_executable(vector_addremove_test ${VECTOR_TEST_HEADERS} test/vector_addremove_test.cpp test/test_helpers.cpp)
add_executable(vector_iterator_test ${VECTOR_TEST_HEADERS} test/vector_iterator_test.cpp test/test_helpers.cpp)
add_executable(vector_relational_test ${VECTOR_TEST_HEADERS} test/vector_relational_test.cpp test/test_helpers.cpp)
add_executable(dense_map_test ${DENSE_MAP_TEST_HEADERS} test/dense_map_test.cpp test/test_helpers.cpp)
add_executable(dense_map_perf ${DENSE_MAP_PERF_HEADERS} test/dense_map_perf.cpp test/test_helpers.cpp)

#add_test(vectorTest vector_test)
add_test(vectorConstructors vector_constructor_test)
add_test(vectorAssignment vector_assignment_test)
add_test(vectorAccessors vector_accessor_test)
add_test(vectorDimensions vector_dimension_test)
add_test(vectorAddRemove vector_addremove_test)
add_test(vectorIterators vector_iterator_test)
add_test(vectorRelational vector_relational_test)
add_test(denseMapTest dense_map_test)
add_test(denseMapPerf dense_map_perf)

if (${CMAKE_CXX_COMPILER_ID} STREQUAL Clang)
	# using Clang
	string(CONCAT CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} " -std=c++14 -Wall -pedantic")
	string(CONCAT CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE} " -O3")
elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL GNU)
	# using GCC
	string(CONCAT CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} " -std=c++14 -Wall -pedantic -Wextra")
	string(CONCAT CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE} " -flto")
elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL Intel)
	# using Intel C++
	string(CONCAT CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} " -std=c++14 -Wall")
	string(CONCAT CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE} " -O3 -ipo")
elseif (${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
	# using Visual C++
	# message(AUTHOR_WARNING "Requires VS2015 or later")
	if(MSVC_VERSION LESS 1900)
		MESSAGE(FATAL_ERROR "Project requires VS2015 or later")
	endif()
	add_definitions(-D_ITERATOR_DEBUG_LEVEL=0)
	string(REPLACE "/W3" "/W4" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
	string(REPLACE "/O2" "/Ox" CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})
	string(CONCAT CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} " /sdl /MP")
	string(CONCAT CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE} " /Oi /GL")
	set_target_properties(${ALL_TEST_EXECUTABLES} PROPERTIES LINK_FLAGS_RELEASE "/LTCG")
else()
	# unknown c++ compiler in use
	message(FATAL_ERROR "Unknown c++ compiler target in use.")
endif()

message(STATUS "CMAKE_CXX_COMPILER_ID ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}")
message(STATUS "CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG}")
message(STATUS "CMAKE_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}")
message(STATUS "CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE}")
